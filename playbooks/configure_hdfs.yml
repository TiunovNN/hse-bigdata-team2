---
- name: Configure hosts
  hosts:
    - datanodes
    - namenodes
    - secondary_namenodes

  tasks:
  - name: create user hadoop
    ansible.builtin.user:
      name: hadoop
      create_home: yes
      generate_ssh_key: yes
      ssh_key_bits: 2048
      ssh_key_file: .ssh/id_rsa

  - name: configure /etc/hosts
    lineinfile:
      dest: /etc/hosts
      regexp: ".*{{ hostvars[item]['ansible_hostname'] }}$"
      line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ hostvars[item]['ansible_hostname'] }} {{hostvars[item]['ansible_fqdn'] }}"
      state: present
    with_items: "{{ ansible_play_batch }}"

  - name: Collect ssh public keys
    shell: /bin/cat /home/hadoop/.ssh/id_rsa.pub
    register: ssh_keys
    changed_when: false
    no_log: yes

  - name: Allow passwordless SSH between all hosts
    lineinfile:
      create: yes
      dest: /home/hadoop/.ssh/authorized_keys
      state: present
      line:  "{{ hostvars[item]['ssh_keys']['stdout'] }}"
      group: hadoop
      owner: hadoop
    with_items: "{{ ansible_play_batch }}"

  - name: Scan for SSH host keys
    ansible.builtin.command: ssh-keyscan -H {{ hostvars[item]['ansible_hostname'] }}
    register: ssh_scan
    with_items: "{{ ansible_play_batch }}"
    changed_when: false
    retries: 5
    delay: 3

  - name: Write the host keys to known hosts
    ansible.builtin.known_hosts:
      path: /home/hadoop/.ssh/known_hosts
      name: "{{ hostvars[item.item]['ansible_hostname'] }}"
      state: present
      key: "{{ item.stdout }}"
    with_items: "{{ ssh_scan.results }}"
    no_log: yes

  - name: Ensure known_hosts has right permissions
    ansible.builtin.file:
      path: /home/hadoop/.ssh/known_hosts
      group: hadoop
      owner: hadoop

  - name: Install packages
    ansible.builtin.apt:
      name:
        - openjdk-11-jdk
      state: latest
      update_cache: yes

  - name: Fetch java_home
    shell: dirname $(dirname $(readlink -f $(which javac)))
    register: java_home
    no_log: yes

  - name: Download hadoop
    ansible.builtin.unarchive:
      src: https://dlcdn.apache.org/hadoop/common/stable/hadoop-3.4.0.tar.gz
      dest: /home/hadoop/
      remote_src: yes
      creates: /home/hadoop/hadoop-3.4.0
      group: hadoop
      owner: hadoop
    retries: 5
    delay: 3

  - name: Configure hadoop environment variables in ~/.profile
    ansible.builtin.blockinfile:
      path: /home/hadoop/.profile
      marker: "# {mark} ANSIBLE MANAGED BLOCK HDFS"
      append_newline: true
      prepend_newline: true
      block: |
        export HADOOP_HOME=/home/hadoop/hadoop-3.4.0
        export JAVA_HOME={{ java_home.stdout }}
        export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin

  - name: Configure hadoop environment variables in hadoop-env.sh
    ansible.builtin.blockinfile:
      path: /home/hadoop/hadoop-3.4.0/etc/hadoop/hadoop-env.sh
      append_newline: true
      prepend_newline: true
      block: |
        export JAVA_HOME={{ java_home.stdout }}

  - name: Check hadoop run
    ansible.builtin.shell: hadoop version
    become: yes
    become_user: hadoop
    become_method: sudo
    become_flags: '-i -S'

  - name: Edit core-site.xml
    ansible.builtin.template:
      src: ./namenode_core_site.xml.j2
      dest: /home/hadoop/hadoop-3.4.0/etc/hadoop/core-site.xml
    vars:
      namenode: "{{ groups['namenodes'] | map('extract', hostvars, 'ansible_hostname') | first }}"

  - name: Put hdfs-site.xml
    ansible.builtin.template:
      src: ./namenode_hdfs_site.xml.j2
      dest: /home/hadoop/hadoop-3.4.0/etc/hadoop/hdfs-site.xml
    vars:
      secondary_namenode: "{{ groups['secondary_namenodes'] | map('extract', hostvars, 'ansible_hostname') | first }}"
      namenode: "{{ groups['namenodes'] | map('extract', hostvars, 'ansible_hostname') | first }}"

  - name: Configure workers
    ansible.builtin.template:
      dest: /home/hadoop/hadoop-3.4.0/etc/hadoop/workers
      src: ./workers.j2

  - name: Gather service
    ansible.builtin.service_facts:

  - name: Stop HDFS service
    ansible.builtin.systemd_service:
      enabled: true
      name: hdfs.service
      state: stopped
    when: ansible_facts.services['hdfs.service'] is defined

  - name: Remove old info
    ansible.builtin.file:
      state: absent
      path: /tmp/hadoop-hadoop

  - name: Namenode format
    ansible.builtin.shell: hdfs namenode -format -force -nonInteractive
    become: yes
    become_user: hadoop
    become_method: sudo
    become_flags: '-i -S'
    when: inventory_hostname in groups['namenodes']


- name: Confure hdfs.service
  gather_facts: no
  hosts:
    - namenodes
    - secondary_namenodes
    - datanodes
  tasks:
    - name: Create hdfs.service
      ansible.builtin.copy:
        src: ./hdfs.service
        dest: /etc/systemd/system/hdfs.service

    - name: Enable hdfs service
      ansible.builtin.systemd_service:
        daemon_reload: true
        enabled: true
        name: hdfs.service
        state: restarted

- name: Configure nginx
  hosts: jumpnodes
  vars:
    services:
    - {port: 9870, name: 'nn'}
    namenode: "{{ groups['namenodes'] | map('extract', hostvars, 'ansible_hostname') | first}}"
  tasks:
    - name: configure /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: ".*{{ hostvars[item]['ansible_hostname'] }}$"
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ hostvars[item]['ansible_hostname'] }} {{hostvars[item]['ansible_fqdn'] }}"
        state: present
      with_items: "{{ groups['namenodes']}}"

    - name: Ensure installed nginx
      ansible.builtin.apt:
        name:
          - nginx
          - apache2-utils
          - python3-passlib
        state: latest
        update_cache: yes

    - name: Add a user to a password file and ensure permissions are set
      community.general.htpasswd:
        path: /etc/nginx/htpasswd
        name: "{{ nginx_user }}"
        password: "{{ nginx_password }}"
        owner: root
        group: www-data
        mode: 0640
        state: present


    - name: Configure proxy
      ansible.builtin.template:
        src: ./nginx.j2
        dest: "/etc/nginx/sites-available/{{ item.name }}"
      with_items: "{{ services }}"
      notify: Restart nginx

    - name: Enable proxy
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ item.name}}"
        dest: "/etc/nginx/sites-enabled/{{ item.name }}"
        state: link
      with_items: "{{ services }}"
      notify: Restart nginx

    - name: Disable default
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent


  handlers:
    - name: Restart nginx
      service:
        name: nginx
        state: reloaded
