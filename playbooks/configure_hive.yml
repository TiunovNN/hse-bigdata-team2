---
- name: Configure Postgres
  hosts:
  - namenodes

  tasks:
  - name: Install postgres
    ansible.builtin.apt:
      name:
        - postgresql
      state: latest
      update_cache: yes

  - name: "Find out if PostgreSQL is initialized"
    ansible.builtin.stat:
      path: "/var/lib/pgsql/data/pg_hba.conf"
    register: postgres_data

  - name: "Initialize PostgreSQL"
    ansible.builtin.shell: "postgresql-setup initdb"
    when: not postgres_data.stat.exists
  - name: "Start and enable services"
    ansible.builtin.service:
      name: postgresql
      state: started
      enabled: yes

  - name: Bare include (free-form)
    ansible.builtin.include_vars: postgres_info.yaml

  - name: "Create app database"
    postgresql_db:
      state: present
      name: "{{ db_name }}"
    become: yes
    become_user: postgres

  - name: "Create db user"
    postgresql_user:
      state: present
      name: "{{ db_user }}"
      password: "{{ db_password }}"
    become: yes
    become_user: postgres

  - name: "Grant db user access to app db"
    postgresql_privs:
      type: database
      database: "{{ db_name }}"
      roles: "{{ db_user }}"
      grant_option: no
      privs: all
    become: yes
    become_user: postgres

  - name: "Allow md5 connection for the db user"
    postgresql_pg_hba:
      dest: "~/data/pg_hba.conf"
      contype: host
      databases: all
      method: md5
      users: "{{ db_user }}"
      create: true
    become: yes
    become_user: postgres
    notify: restart postgres

  handlers:
  - name: restart postgres
    service:
      name: postgresql
      state: restarted

# - name: Configure hosts
#   hosts:
#   - namenodes
#   tasks:
#   - name: Download hive
#     ansible.builtin.unarchive:
#       src: https://dlcdn.apache.org/hive/hive-4.0.1/apache-hive-4.0.1-bin.tar.gz
#       dest: /home/hadoop/
#       remote_src: yes
#       creates: /home/hadoop/apache-hive-4.0.1-bin
#       group: hadoop
#       owner: hadoop
#     retries: 5
#     delay: 3

#   - name: Configure hive environment variables in ~/.profile
#     ansible.builtin.blockinfile:
#       path: /home/hadoop/.profile
#       append_newline: true
#       prepend_newline: true
#       marker: "# {mark} ANSIBLE MANAGED BLOCK HIVE"
#       block: |
#         export HIVE_HOME=/home/hadoop/apache-hive-4.0.1-bin
#         export PATH=$PATH:$HIVE_HOME/bin

#   - name: Configure HDFS for Hive
#     ansible.builtin.shell: "{{ item }}"
#     become: yes
#     become_user: hadoop
#     become_method: sudo
#     become_flags: '-i -S'
#     loop:
#       - hdfs dfs -mkdir -p /tmp
#       - hdfs dfs -mkdir -p /user/hive/warehouse
#       - hdfs dfs -chmod g+w /tmp
#       - hdfs dfs -chmod g+w /user/hive/warehouse
#       - schematool -dbType derby -initOrUpgradeSchema

#   - name: Create hive.service
#     ansible.builtin.copy:
#       src: ./hive.service
#       dest: /etc/systemd/system/hive.service

#   - name: Enable hive service
#     ansible.builtin.systemd_service:
#       daemon_reload: true
#       enabled: true
#       name: hive.service
#       state: started


# - name: Configure nginx
#   hosts: jumpnodes
#   vars:
#     services:
#     - {port: 10002, name: 'hive'}
#     namenode: "{{ groups['namenodes'] | map('extract', hostvars, 'ansible_hostname') | first}}"
#   tasks:
#     - name: configure /etc/hosts
#       lineinfile:
#         dest: /etc/hosts
#         regexp: ".*{{ hostvars[item]['ansible_hostname'] }}$"
#         line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ hostvars[item]['ansible_hostname'] }} {{hostvars[item]['ansible_fqdn'] }}"
#         state: present
#       with_items: "{{ groups['namenodes']}}"

#     - name: Ensure installed nginx
#       ansible.builtin.apt:
#         name:
#           - nginx
#         state: latest
#         update_cache: yes

#     - name: Configure proxy
#       ansible.builtin.template:
#         src: ./nginx.j2
#         dest: "/etc/nginx/sites-available/{{ item.name }}"
#       with_items: "{{ services }}"
#       notify: Restart nginx

#     - name: Enable proxy
#       ansible.builtin.file:
#         src: "/etc/nginx/sites-available/{{ item.name}}"
#         dest: "/etc/nginx/sites-enabled/{{ item.name }}"
#         state: link
#       with_items: "{{ services }}"
#       notify: Restart nginx

#     - name: Disable default
#       ansible.builtin.file:
#         path: /etc/nginx/sites-enabled/default
#         state: absent


#   handlers:
#     - name: Restart nginx
#       service:
#         name: nginx
#         state: reloaded
