---
- name: Configure Postgres
  hosts:
  - namenodes

  tasks:
  - name: Install postgres
    ansible.builtin.apt:
      name:
        - postgresql
        - libpq-dev
        - python3-psycopg2
      state: latest
      update_cache: yes

  - name: "Start and enable services"
    ansible.builtin.service:
      name: postgresql
      state: started
      enabled: yes

  - name: "Create db user"
    community.postgresql.postgresql_user:
      state: present
      name: "{{ db_user }}"
      password: "{{ db_password }}"
    become: yes
    become_user: postgres

  - name: "Create app database"
    community.postgresql.postgresql_db:
      state: present
      name: "{{ db_name }}"
      owner: "{{ db_user }}"
    become: yes
    become_user: postgres

  - name: "Grant db user access to app db"
    community.postgresql.postgresql_privs:
      type: database
      database: "{{ db_name }}"
      roles: "{{ db_user }}"
      grant_option: no
      privs: all

    become: yes
    become_user: postgres

  - name: "Allow md5 connection for the db user"
    community.postgresql.postgresql_pg_hba:
      dest: "/etc/postgresql/16/main/pg_hba.conf"
      contype: host
      databases: "{{ db_name }}"
      method: md5
      users: "{{ db_user }}"
      create: true
      source: all
    become: yes
    become_user: postgres
    notify: restart postgres

  - name: "Configure postgres address"
    ansible.builtin.lineinfile:
      dest: /etc/postgresql/16/main/postgresql.conf
      state: present
      line:  "listen_addresses = '0.0.0.0'"
    notify: restart postgres

  handlers:
  - name: restart postgres
    service:
      name: postgresql
      state: restarted

- name: Configure hosts
  hosts:
  - namenodes
  tasks:
  - name: Download hive
    ansible.builtin.unarchive:
      src: https://archive.apache.org/dist/hive/hive-4.0.0-alpha-2/apache-hive-4.0.0-alpha-2-bin.tar.gz
      dest: /home/hadoop/
      remote_src: yes
      creates: /home/hadoop/apache-hive-4.0.0-alpha-2-bin
      group: hadoop
      owner: hadoop
    retries: 5
    delay: 3

  - name: Configure hive environment variables in ~/.profile
    ansible.builtin.blockinfile:
      path: /home/hadoop/.profile
      append_newline: true
      prepend_newline: true
      marker: "# {mark} ANSIBLE MANAGED BLOCK HIVE"
      block: |
        export HIVE_HOME=/home/hadoop/apache-hive-4.0.0-alpha-2-bin
        export HIVE_CONF_DIR=$HIVE_HOME/conf
        export HIVE_AUX_JARS_PATH=$HIVE_HOME/lib/*
        export PATH=$PATH:$HIVE_HOME/bin

  - name: Download postgres driver
    ansible.builtin.get_url:
      url: https://jdbc.postgresql.org/download/postgresql-42.7.4.jar
      dest: /home/hadoop/apache-hive-4.0.0-alpha-2-bin/lib/postgresql-42.7.4.jar
      group: hadoop
      owner: hadoop
    retries: 5
    delay: 3

  - name: Edit hive-site.xml
    ansible.builtin.template:
      src: ./hive_site.xml.j2
      dest: /home/hadoop/apache-hive-4.0.0-alpha-2-bin/conf/hive-site.xml
    vars:
      namenode: "{{ groups['namenodes'] | map('extract', hostvars, 'ansible_hostname') | first }}"

  - name: Configure HDFS for Hive
    ansible.builtin.shell: "{{ item }}"
    become: yes
    become_user: hadoop
    become_method: sudo
    become_flags: '-i -S'
    loop:
      - hdfs dfs -mkdir -p /tmp
      - hdfs dfs -mkdir -p /user/hive/warehouse
      - hdfs dfs -chmod g+w /tmp
      - hdfs dfs -chmod g+w /user/hive/warehouse
      - schematool -dbType postgres -initOrUpgradeSchema

  - name: Create hive.service
    ansible.builtin.copy:
      src: ./hive.service
      dest: /etc/systemd/system/hive.service

  - name: Enable hive service
    ansible.builtin.systemd_service:
      daemon_reload: true
      enabled: true
      name: hive.service
      state: started


- name: Configure nginx
  hosts: jumpnodes
  vars:
    services:
    - {port: 10002, name: 'hive'}
    namenode: "{{ groups['namenodes'] | map('extract', hostvars, 'ansible_hostname') | first}}"
  tasks:
    - name: configure /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: ".*{{ hostvars[item]['ansible_hostname'] }}$"
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ hostvars[item]['ansible_hostname'] }} {{hostvars[item]['ansible_fqdn'] }}"
        state: present
      with_items: "{{ groups['namenodes']}}"

    - name: Ensure installed nginx
      ansible.builtin.apt:
        name:
          - nginx
        state: latest
        update_cache: yes
    - name: Add a user to a password file and ensure permissions are set
      community.general.htpasswd:
        path: /etc/nginx/htpasswd
        name: "{{ nginx_user }}"
        password: "{{ nginx_password }}"
        owner: root
        group: www-data
        mode: 0640
        state: present

    - name: Configure proxy
      ansible.builtin.template:
        src: ./nginx.j2
        dest: "/etc/nginx/sites-available/{{ item.name }}"
      with_items: "{{ services }}"
      notify: Restart nginx

    - name: Enable proxy
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ item.name}}"
        dest: "/etc/nginx/sites-enabled/{{ item.name }}"
        state: link
      with_items: "{{ services }}"
      notify: Restart nginx

    - name: Disable default
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent


  handlers:
    - name: Restart nginx
      service:
        name: nginx
        state: reloaded
